<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.programmeren4.turnahead</groupId>
	<artifactId>turnahead</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>GWT Maven Archetype</name>

	<properties>
		<gwtVersion>2.6.0</gwtVersion>
		<javaJDKVersion>1.7</javaJDKVersion>
		<mavenWARVersion>2.1.1</mavenWARVersion>
		<mavenCompilerVersion>2.3.2</mavenCompilerVersion>
		<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<!-- GWT dependecies -->
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-servlet</artifactId>
			<version>${gwtVersion}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<version>${gwtVersion}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.0.0.GA</version>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.0.0.GA</version>
			<classifier>sources</classifier>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.6</version>
		</dependency>

		<!-- Testing dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<!-- Genereert de gecompileerde klassen naar WEB-INF/classes voor dev mode -->
		<outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>**/Messages.properties</exclude>
				</excludes>
			</resource>
		</resources>

		<plugins>
			<!-- GWT Maven Plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<version>2.6.0</version>
				<executions>
					<execution>
						<goals>
							<!-- Doelen die uitgevoerd worden bij GWT compilatie Resources: voegt 
								src/main/resources toe aan het classpath zodat de bestanden hierin gevonden 
								kunnen worden Compile: compileert Test: voert alle beschikbare testen uit 
								i18n & generateAsync: laat GWT klassen genereren die nodig zijn voor de compilatie -->
							<goal>resources</goal>
							<goal>generateAsync</goal>
							<goal>compile</goal>
							<goal>test</goal>
						</goals>
					</execution>
				</executions>
				<!-- Plugin configuratie. Er zijn veel opties te vinden op codehaus.org 
					in de documentatie van de gwt-maven-plugin -->
				<configuration>
					<runTarget>index.html</runTarget>
					<hostedWebapp>${webappDirectory}</hostedWebapp>
				</configuration>
			</plugin>
			<!-- Kopieert statische web files naar de webapp folder voor gwt:run uitgevoerd 
				wordt -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>exploded</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<webappDirectory>${webappDirectory}</webappDirectory>
				</configuration>
			</plugin>
			<!-- Met deze plugin kunnen we de Java versie om te compileren op 1.7 
				zetten -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
		</plugins>


		<!-- PluginManagement laat toe de goals i18n[gwt-maven-plugin] en exploded[maven-war-plugin] 
			te negeren in Eclipse. Als deze niet genegeerd worden in de validatie krijg 
			je permanent een error over i18n en exploded. Zolang er errors zouden staan 
			in de pom kan er niet gecompileerd worden in eclipse (wel met mvn gwt:compile) 
			en worden de Async klassen niet automatisch gegenereerd. Dit heeft geen impact 
			op de maven build zelf. -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>gwt-maven-plugin</artifactId>
										<versionRange>[2.4.0,)</versionRange>
										<goals>
											<goal>i18n</goal>
											<goal>generateAsync</goal>
											<goal>resources</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-war-plugin</artifactId>
										<versionRange>[2.1.1,)</versionRange>
										<goals>
											<goal>exploded</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
						<webappDirectory>${webappDirectory}</webappDirectory>
						<runTarget>index.html</runTarget>
						<hostedWebapp>${webappDirectory}</hostedWebapp>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

	</build>
</project>